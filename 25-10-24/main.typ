== Проверка графа на двудольность (Гожева)
*Задача:* определить, является ли заданный неориентированный граф двудольным. Дводольный (бипартитный) --- граф, вершины которого можно разбить на два множества так, что любое ребро будет иметь своими концами вершины из разных подмножество

Применение:
Гетерогенные графы таккие графы, где
...

*Алгоритм:*
+ Для каждой вершины $v in V(G)$ выполнить
+ Цвет[v] $<-$ неопределен.
+ Конец для для нашего графа. 

#image("1.png")

#table(
  columns: 2,

  [queue], ["цвета"],

  [-], [-],
  [1], [1 -],
  [2], [12],
  [34], [1211],
  [45], [12112],
  [56], [121122],

)

Давайте посмотрим на этот алгоритм с другой стороны.

Цикл нечетной длины -- цикл с нечетным числом ребер.

*Теорема Кенинга:*

_Граф двудольный тогда и только тогда, когда он не содержит циклов нечетной длины._

Это ключевое свойство также используется в алгоритме проверки:

Расстояния из s до вершин с одинаковыми цветами имеют одинаковую четность, т.к. мы красим чередую 2 увета. => если u и v одинакового ...


=== Проверка на ацикличность

*Задача:* определить, содержит ли заданный граф циклы, т.е. можно ли пройти по ребрам графа так, чтобы вернуться в исзодную вершину пройдя при жтом хотя бы одно реьро (наличие цикла).

#table (
  columns: 2,
  [стэк], [used],
  [-], [000000],
  [1], [100000],
  [21], [110000],
  [321], [111000],
  [5321], [111010],
  [45321], [111110],
  [645321], [1111111]
)

// ФОто 2
В алгоритме мы обозначали статус вершина как НЕ_ПОСЕЩЕНА, В_СТЕКЕ, ОБРАБОТАНА

При реализации часто заменяют статус на цвет:
+ Белый --- не посещена
+ Серый --- в обработке, в стеке 
+ Черный --- обработана, рассмотрена


= Алгоритм Форда-Беллмана (Взвешенные графы, Лазарева)

== Постановка задачи

*Цель.* Найти кратчайшие пути от выбранной вершины до всех остальных вершин графа.

*Особенность.* Работает с ребрами, имеющие отрицательные и неотрицательные веса.

Алгоритм Форда-Беллмана --- алгоритм поиска кратчайшего пути во взвешенном графе. Допускает ребра с отрицательными весами.

*Класс решаемых задач.* Дан ориентированный или неориентированный граф со взвешенными ребрами. Длиной пути назовем сумму весов ребер, входящих в этот путь. Требуется найти кратчайшие пути от выделенной вершины до всех вершин графа.

*Опр.* Цикл, сумма весов ребер которого отрицательна называется отрицательным циклом.

*Лемма.* Если в графе нет циклов отрицательной длины, то кратчайший путь между любыми двумя вершинами содержит не более $abs(V) -1$ ребер, где $abs(V)$ --- количество вершин в графе.

*Док-во.* В более длинном пути некоторая вершина встречается минимум дважды соледвоательно есть цикл. По условию его дилна положительна, то есть удаление тго цикла уменьшит длину пути.

// Фото 3


*Сложность алгоритма:* $O(abs(V) dot abs(E))$

*Обоснование:* Алгоритм выполняет $abs(V) - 1$ итерацию основного цикла и 1 итерацию для проверки отрицательного цикла, внутри каждой итерации проводится $abs(E)$

*Лучшее время:* $O(abs(E))$

*Затраты памяти:* $O(abs(V))$

